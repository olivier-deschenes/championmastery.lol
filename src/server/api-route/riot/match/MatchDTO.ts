import * as v from "valibot";

const ChallengesSchema = v.object({
  "12AssistStreakCount": v.number(),
  HealFromMapSources: v.number(),
  InfernalScalePickup: v.number(),
  SWARM_DefeatAatrox: v.number(),
  SWARM_DefeatBriar: v.number(),
  SWARM_DefeatMiniBosses: v.number(),
  SWARM_EvolveWeapon: v.number(),
  SWARM_Have3Passives: v.number(),
  SWARM_KillEnemy: v.number(),
  SWARM_PickupGold: v.number(),
  SWARM_ReachLevel50: v.number(),
  SWARM_Survive15Min: v.number(),
  SWARM_WinWith5EvolvedWeapons: v.number(),
  abilityUses: v.number(),
  acesBefore15Minutes: v.number(),
  alliedJungleMonsterKills: v.number(),
  baronBuffGoldAdvantageOverThreshold: v.optional(v.number()),
  baronTakedowns: v.number(),
  blastConeOppositeOpponentCount: v.number(),
  bountyGold: v.number(),
  buffsStolen: v.number(),
  completeSupportQuestInTime: v.number(),
  controlWardTimeCoverageInRiverOrEnemyHalf: v.optional(v.number()),
  controlWardsPlaced: v.number(),
  damagePerMinute: v.number(),
  damageTakenOnTeamPercentage: v.number(),
  dancedWithRiftHerald: v.number(),
  deathsByEnemyChamps: v.number(),
  dodgeSkillShotsSmallWindow: v.number(),
  doubleAces: v.number(),
  dragonTakedowns: v.number(),
  earliestBaron: v.optional(v.number()),
  earliestDragonTakedown: v.optional(v.number()),
  earlyLaningPhaseGoldExpAdvantage: v.number(),
  effectiveHealAndShielding: v.number(),
  elderDragonKillsWithOpposingSoul: v.number(),
  elderDragonMultikills: v.number(),
  enemyChampionImmobilizations: v.number(),
  enemyJungleMonsterKills: v.number(),
  epicMonsterKillsNearEnemyJungler: v.number(),
  epicMonsterKillsWithin30SecondsOfSpawn: v.number(),
  epicMonsterSteals: v.number(),
  epicMonsterStolenWithoutSmite: v.number(),
  fasterSupportQuestCompletion: v.optional(v.number()),
  fastestLegendary: v.optional(v.number()),
  firstTurretKilled: v.number(),
  firstTurretKilledTime: v.optional(v.number()),
  fistBumpParticipation: v.number(),
  flawlessAces: v.number(),
  fullTeamTakedown: v.number(),
  gameLength: v.number(),
  getTakedownsInAllLanesEarlyJungleAsLaner: v.number(),
  goldPerMinute: v.number(),
  hadOpenNexus: v.number(),
  highestChampionDamage: v.optional(v.number()),
  highestCrowdControlScore: v.optional(v.number()),
  highestWardKills: v.optional(v.number()),
  immobilizeAndKillWithAlly: v.number(),
  initialBuffCount: v.number(),
  initialCrabCount: v.number(),
  jungleCsBefore10Minutes: v.number(),
  junglerKillsEarlyJungle: v.optional(v.number()),
  junglerTakedownsNearDamagedEpicMonster: v.number(),
  kTurretsDestroyedBeforePlatesFall: v.number(),
  kda: v.number(),
  killAfterHiddenWithAlly: v.number(),
  killParticipation: v.number(),
  killedChampTookFullTeamDamageSurvived: v.number(),
  killingSprees: v.number(),
  killsNearEnemyTurret: v.number(),
  killsOnLanersEarlyJungleAsJungler: v.optional(v.number()),
  killsOnOtherLanesEarlyJungleAsLaner: v.number(),
  killsOnRecentlyHealedByAramPack: v.number(),
  killsUnderOwnTurret: v.number(),
  killsWithHelpFromEpicMonster: v.number(),
  knockEnemyIntoTeamAndKill: v.number(),
  landSkillShotsEarlyGame: v.number(),
  laneMinionsFirst10Minutes: v.number(),
  laningPhaseGoldExpAdvantage: v.number(),
  legendaryCount: v.number(),
  legendaryItemUsed: v.array(v.number()),
  lostAnInhibitor: v.number(),
  maxCsAdvantageOnLaneOpponent: v.number(),
  maxKillDeficit: v.number(),
  maxLevelLeadLaneOpponent: v.number(),
  mejaisFullStackInTime: v.number(),
  moreEnemyJungleThanOpponent: v.number(),
  multiKillOneSpell: v.number(),
  multiTurretRiftHeraldCount: v.number(),
  multikills: v.number(),
  multikillsAfterAggressiveFlash: v.number(),
  outerTurretExecutesBefore10Minutes: v.number(),
  outnumberedKills: v.number(),
  outnumberedNexusKill: v.number(),
  perfectDragonSoulsTaken: v.number(),
  perfectGame: v.number(),
  pickKillWithAlly: v.number(),
  playedChampSelectPosition: v.number(),
  poroExplosions: v.number(),
  quickCleanse: v.number(),
  quickFirstTurret: v.number(),
  quickSoloKills: v.number(),
  riftHeraldTakedowns: v.number(),
  saveAllyFromDeath: v.number(),
  scuttleCrabKills: v.number(),
  shortestTimeToAceFromFirstTakedown: v.optional(v.number()),
  skillshotsDodged: v.number(),
  skillshotsHit: v.number(),
  snowballsHit: v.number(),
  soloBaronKills: v.number(),
  soloKills: v.number(),
  soloTurretsLategame: v.optional(v.number()),
  stealthWardsPlaced: v.number(),
  survivedSingleDigitHpCount: v.number(),
  survivedThreeImmobilizesInFight: v.number(),
  takedownOnFirstTurret: v.number(),
  takedowns: v.number(),
  takedownsAfterGainingLevelAdvantage: v.number(),
  takedownsBeforeJungleMinionSpawn: v.number(),
  takedownsFirstXMinutes: v.number(),
  takedownsInAlcove: v.number(),
  takedownsInEnemyFountain: v.number(),
  teamBaronKills: v.number(),
  teamDamagePercentage: v.number(),
  teamElderDragonKills: v.number(),
  teamRiftHeraldKills: v.number(),
  tookLargeDamageSurvived: v.number(),
  turretPlatesTaken: v.number(),
  turretTakedowns: v.number(),
  turretsTakenWithRiftHerald: v.number(),
  twentyMinionsIn3SecondsCount: v.number(),
  twoWardsOneSweeperCount: v.number(),
  unseenRecalls: v.number(),
  visionScoreAdvantageLaneOpponent: v.number(),
  visionScorePerMinute: v.number(),
  voidMonsterKill: v.number(),
  wardTakedowns: v.number(),
  wardTakedownsBefore20M: v.number(),
  wardsGuarded: v.number(),
});

const MissionsSchema = v.object({
  playerScore1: v.number(),
  playerScore2: v.number(),
  playerScore3: v.number(),
  playerScore4: v.number(),
  playerScore5: v.number(),
  playerScore6: v.number(),
  playerScore7: v.number(),
  playerScore8: v.number(),
  playerScore9: v.number(),
  playerScore10: v.number(),
  playerScore11: v.number(),
});

const StatPerksSchema = v.object({
  defense: v.number(),
  flex: v.number(),
  offense: v.number(),
});

const PerkSelectionSchema = v.object({
  perk: v.number(),
  var1: v.number(),
  var2: v.number(),
  var3: v.number(),
});

const PerkStyleSchema = v.object({
  description: v.string(),
  selections: v.array(PerkSelectionSchema),
  style: v.number(),
});

const PerksSchema = v.object({
  statPerks: StatPerksSchema,
  styles: v.array(PerkStyleSchema),
});

export const individualPositions = [
  "BOTTOM",
  "JUNGLE",
  "MIDDLE",
  "TOP",
  "UTILITY",
  "Invalid",
] as const;
export type IndividualPositionType = (typeof individualPositions)[number];

export const ParticipantDTOSchema = v.object({
  assists: v.number(),
  baronKills: v.number(),
  basicPings: v.number(),
  championId: v.number(),
  championName: v.string(),
  champLevel: v.number(),

  damageDealtToBuildings: v.number(),
  damageDealtToObjectives: v.number(),
  damageDealtToTurrets: v.number(),
  damageSelfMitigated: v.number(),

  deaths: v.number(),

  doubleKills: v.number(),
  dragonKills: v.number(),
  goldEarned: v.number(),
  goldSpent: v.number(),
  individualPosition: v.picklist(individualPositions),
  inhibitorKills: v.number(),
  item0: v.number(),
  item1: v.number(),
  item2: v.number(),
  item3: v.number(),
  item4: v.number(),
  item5: v.number(),
  item6: v.number(),
  killingSprees: v.number(),
  kills: v.number(),
  lane: v.string(),
  largestCriticalStrike: v.number(),
  magicDamageDealtToChampions: v.number(),
  neutralMinionsKilled: v.number(),
  participantId: v.number(),
  pentaKills: v.number(),
  perks: PerksSchema,
  physicalDamageDealt: v.number(),
  physicalDamageDealtToChampions: v.number(),
  physicalDamageTaken: v.number(),
  placement: v.number(),
  playerSubteamId: v.number(),
  profileIcon: v.number(),
  puuid: v.string(),
  quadraKills: v.number(),
  riotIdGameName: v.string(),
  riotIdTagline: v.string(),
  summoner1Id: v.number(),
  summoner2Id: v.number(),
  summonerLevel: v.number(),
  teamId: v.number(),
  teamPosition: v.string(),
  totalAllyJungleMinionsKilled: v.number(),
  totalDamageDealtToChampions: v.number(),
  totalDamageTaken: v.number(),
  totalMinionsKilled: v.number(),
  tripleKills: v.number(),
  turretKills: v.number(),
  unrealKills: v.number(),
  visionScore: v.number(),
  wardsKilled: v.number(),
  win: v.boolean(),
});
export type MatchParticipantDTOType = v.InferOutput<
  typeof ParticipantDTOSchema
>;

const BanSchema = v.object({
  championId: v.number(),
  pickTurn: v.number(),
});

const FeatSchema = v.object({
  featState: v.number(),
});

const ObjectiveSchema = v.object({
  first: v.boolean(),
  kills: v.number(),
});

const TeamObjectivesSchema = v.object({
  atakhan: ObjectiveSchema,
  baron: ObjectiveSchema,
  champion: ObjectiveSchema,
  dragon: ObjectiveSchema,
  horde: ObjectiveSchema,
  inhibitor: ObjectiveSchema,
  riftHerald: ObjectiveSchema,
  tower: ObjectiveSchema,
});

const TeamSchema = v.object({
  bans: v.array(BanSchema),
  /* feats: v.object({
    EPIC_MONSTER_KILL: FeatSchema,
    FIRST_BLOOD: FeatSchema,
    FIRST_TURRET: FeatSchema,
  }), */
  // objectives: TeamObjectivesSchema,
  teamId: v.number(),
  win: v.boolean(),
});

const MetadataSchema = v.object({
  dataVersion: v.string(),
  matchId: v.string(),
  participants: v.array(v.string()),
});

const InfoSchema = v.object({
  gameCreation: v.number(),
  gameDuration: v.number(),
  gameEndTimestamp: v.number(),
  gameId: v.number(),
  gameMode: v.string(),
  gameName: v.string(),
  gameStartTimestamp: v.number(),
  gameType: v.string(),
  gameVersion: v.string(),
  mapId: v.number(),
  participants: v.array(ParticipantDTOSchema),
  platformId: v.string(),
  queueId: v.number(),
  teams: v.array(TeamSchema),
  tournamentCode: v.string(),
});

export const MatchDTOSchema = v.object({
  metadata: MetadataSchema,
  info: InfoSchema,
});

export type MatchDTOType = v.InferInput<typeof MatchDTOSchema>;
